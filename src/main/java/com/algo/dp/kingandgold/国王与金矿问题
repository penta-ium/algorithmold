有一个国家发现了5座金矿，每座金矿的黄金储量不同，需要参与挖掘的工人数也不同。参与挖矿工人的总数是10人。
每座金矿要么全挖，要么不挖，不能派出一半人挖取一半金矿。要求用程序求解出，要想得到尽可能多的黄金，应该选择挖取哪几座金矿？
每座金矿的含金量以及需要参与挖掘的人数分别如下：
//金矿数量
int n = 5;
//总人数
int w = 10;
//每个金矿的含金量
int[] g = new int[]{400, 500, 200, 300, 350};
//每个金矿挖掘所需要的人数
int[] p = new int[]{5, 5, 4, 4, 3};

解体思路1：使用递归的方式求解
假设我定义了一个递归调用方法dig(int n, int w);w个人挖掘n个矿（如果n为5，则表示挖掘1到5，如果n为4，则表示挖掘1到4），所能得到的最大金子的数量；
function dig(int n, int w) {
    //退出条件
    n == 0 || w <= 0 || (n == 1 && w <p[n - 1])
    return 0;

    //w个人挖第n个矿
    //1、w个人数够挖第n个矿
    value1 = g[n] + dig(n - 1, w - p[n]);
    //2、w个人数不够挖第n个矿
    value2 = dig(n - 1, w);

    //w个人不挖第n个矿
    value3 = dig(n - 1, w);
}